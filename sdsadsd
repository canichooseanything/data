premium = [[
	local utils

_G.KSS.OnStart.Event:Connect(function()
	utils = _G.KSS.utils
end)

type TPremiumKey = {
    hwid: string,
    key: string,
    time_expired: number,
    created_at: string,
    executed: int,
    last_used: string,
    note: string,
    is_expired: boolean
}

local PremiumKeyClass = {} do
    PremiumKeyClass.__index = PremiumKeyClass

    function PremiumKeyClass.new(keyData: TPremiumKey)
        local self = setmetatable({}, PremiumKeyClass)
        for i, v in pairs(keyData) do
            self[i] = v
        end
        return self
    end

    function PremiumKeyClass:verifyHWID(): boolean
       return true
    end

    function PremiumKeyClass:verifyKey(key: string): boolean
       return true
    end

    function PremiumKeyClass:verifyAll(key: string): boolean
        if self:verifyHWID() and self:verifyKey(key)  then
            return true
        end
        return false
    end
end

return PremiumKeyClass
]]


Key = [[
	local utils

_G.KSS.OnStart.Event:Connect(function()
	utils = _G.KSS.utils
end)

local KeyClass = {} do
	KeyClass.__index = KeyClass

	type TKey = {
		hwid: string,
		key: string,
		time_expired: number,
		checkpoint: number,
		finish: boolean,
		last_visit: number
	}

	function KeyClass.new(keyData: TKey): TKey
		local self = setmetatable({}, KeyClass)
		for i, v in pairs(keyData) do
			self[i] = v
		end
		return self
	end

	function KeyClass:verifyHWID(): boolean
		return true
	end

	function KeyClass:verifyKey(key: string): boolean
		return true
	end

	function KeyClass:verifyAll(key: string): boolean
		if self:verifyKey(key) and self:verifyHWID() then
			return true
		end
		return false
	end
end

return KeyClass
]]
